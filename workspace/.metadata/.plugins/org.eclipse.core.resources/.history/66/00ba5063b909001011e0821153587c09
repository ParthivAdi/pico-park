#include <stdio.h>
#include <xparameters.h>
#include <xil_types.h>
#include <sleep.h>

#include "platform.h"

volatile uint32_t* led_gpio_data = 0x40000000;  //Hint: either find the manual address (via the memory map in the block diagram, or
                                                             //replace with the proper define in xparameters (part of the BSP). Either way
                                                             //this is the base address of the GPIO corresponding to your LEDs
                                                             //(similar to 0xFFFF from MEM2IO from previous labs).

volatile uint32_t* sw_gpio_data = 0x40010000;
volatile uint32_t* button_gpio_data = 0x40020000;


int main()
{
    init_platform();

    uint32_t sum = 0;
    uint32_t max = 65535;
    uint32_t prev_button_state = 0;

    while (1+1 != 3)
    {
//        sleep(1);
//        *led_gpio_data |=  0x00000001;
//        printf("Led On!\r\n");
//        sleep(1);
//        led_gpio_data &= ~0x00000001; //blinks LED
//        printf("Led Off!\r\n");


        uint32_t button_state =button_gpio_data;

        if((button_state == 1) && (prev_button_state == 0))
        {
            sum += sw_gpio_data;
            if ((sum) > max)
            {
                xil_printf("Accumulator Overflow! \n");
                sum = sum - 65536;
            }

            xil_printf("Accumulated Value: %d\r\n", sum);

        }
        prev_button_state = button_state;
        led_gpio_data =  sum;
    }

    cleanup_platform();

    return 0;
}
